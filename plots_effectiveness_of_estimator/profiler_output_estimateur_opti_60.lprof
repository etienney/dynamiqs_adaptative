Timer unit: 1e-07 s

Total time: 53.5522 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: estimateur_opti at line 162

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   162                                           def estimateur_opti(rho_N,k,H_N_plus_k,jump_ops_N_plus_k):
   163                                               # return \|(\mathcal{L}_{N+k}-\mathcal{L}_{N})(\rho_N)\|_1
   164                                           
   165         1          9.0      9.0      0.0      len_jumps = len(jump_ops_N_plus_k)
   166         1     322015.0 322015.0      0.1      N = len(rho_N[0])
   167                                               # k = len(H_N_plus_k[0]) - N 
   168                                               # extension necessaire pour faire les calculs
   169         1    1133420.0    1e+06      0.2      rho_etendu=extension_1D(rho_N,N+k)
   170                                               # reduction de \mathcal{L}_{N+k} en \mathcal{L}_{N} 
   171                                               # (extension(reduction())=projecteur())
   172         1          2.0      2.0      0.0      jump_ops_N = (
   173         3     570382.0 190127.3      0.1          [extension_1D(reduction_1D(jump_ops_N_plus_k[i],N),N+k) for i in range
   174         1          5.0      5.0      0.0          (len(jump_ops_N_plus_k))]
   175                                               )
   176         1      29940.0  29940.0      0.0      H_N=extension_1D(reduction_1D(H_N_plus_k,N),N+k)
   177                                               
   178                                               # calcul de (\mathcal{L}_{N+k}-\mathcal{L}_{N})(\rho_N)
   179                                               
   180                                               # calcul de la partie en H
   181                                               # total = (
   182                                               #     complex(0,-1)*line_to_matrix(line_matrix(matrix_to_line((H_N_plus_k-H_N),k,N+k),
   183                                               #     k,N+k,rho_etendu),k,N+k)
   184                                               # )
   185         1    3648294.0    4e+06      0.7      a = matrix_to_line((H_N_plus_k-H_N),k,N+k)
   186         1   50324907.0    5e+07      9.4      b = line_matrix(a,k,N+k,rho_etendu)
   187         1    3156527.0    3e+06      0.6      total = complex(0,-1)*line_to_matrix(b,k,N+k)
   188                                           
   189                                               # calcul de la partie en \mathcal{L}\rho\mathcal{L}
   190         2         20.0     10.0      0.0      for i in range(len_jumps):
   191         2     211979.0 105989.5      0.0          total += 0.5 * (
   192         5  105045778.0    2e+07     19.6              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   193         2        387.0    193.5      0.0              jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   194         2       2152.0   1076.0      0.0              k,N+k,dq.dag(jump_ops_N_plus_k[i])),k,N+k)
   195                                                   )
   196         2        465.0    232.5      0.0          total += 0.5 * (
   197         5  103581882.0    2e+07     19.3              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   198         2        460.0    230.0      0.0              jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   199         2       2130.0   1065.0      0.0              k,N+k,dq.dag(jump_ops_N[i])),k,N+k)
   200                                                   )
   201                                               # for highly mysterious reasons, sum doesn't work
   202                                               # print(line_to_matrix((line_matrix(line_matrix(matrix_to_line((
   203                                               #     jump_ops_N_plus_k[0] - jump_ops_N[0]),k,n+k),k,n+k,rho_etendu),
   204                                               #     k,n,dq.dag(jump_ops_N_plus_k[0]))),k,n+k))
   205                                               # print((jump_ops_N_plus_k[0]-jump_ops_N[0]) @ rho_etendu @ 
   206                                               #     dq.dag(jump_ops_N_plus_k[0]))
   207                                               # print(type(line_to_matrix((line_matrix(line_matrix(matrix_to_line((
   208                                               #     jump_ops_N_plus_k[0] - jump_ops_N[0]),k,n+k),k,n+k,rho_etendu),
   209                                               #     k,n,dq.dag(jump_ops_N_plus_k[0]))),k,n+k)))
   210                                               # print(type((jump_ops_N_plus_k[0]-jump_ops_N[0]) @ rho_etendu @ 
   211                                               #     dq.dag(jump_ops_N_plus_k[0])))
   212                                               # print(sum([line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   213                                               #     jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   214                                               #     k,N+k,dq.dag(jump_ops_N_plus_k[i])),k,N+k)] for i in range(len(jump_ops_N_plus_k))))
   215                                               
   216                                               # computation of the anticommutator part
   217         2         22.0     11.0      0.0      for i in range(len_jumps):
   218                                                   # dq.dag(jump_ops_N_plus_k[i]-jump_ops_N[i]) @ jump_ops_N[i])
   219                                                   # @ rho_etendu
   220         2        440.0    220.0      0.0          total += -0.5 * (
   221         5  105855137.0    2e+07     19.8              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   222         1       2288.0   2288.0      0.0              dq.dag(jump_ops_N_plus_k[i] - jump_ops_N[i])),k,N+k),
   223         3         16.0      5.3      0.0              k,N+k,jump_ops_N[i]),k,N+k,rho_etendu),k,N+k)
   224                                                   )
   225                                                   # dq.dag(jump_ops_N_plus_k[i]-jump_ops_N[i])
   226                                                   # @ (jump_ops_N_plus_k[i]-jump_ops_N[i]) @ rho_etendu
   227         1  161282538.0    2e+08     30.1          total = special_product(jump_ops_N_plus_k,jump_ops_N,rho_etendu,k,N,total)
   228                                           
   229                                               # We take the norm
   230         1     350729.0 350729.0      0.1      return jnp.linalg.norm((total)+dq.dag(total))

