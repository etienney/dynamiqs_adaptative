Timer unit: 1e-07 s

Total time: 14.6467 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 314

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   314                                           def profil(ninit, nfinal, H, jump_ops):
   315         1          4.0      4.0      0.0      k=4
   316         1    1404356.0    1e+06      1.0      key = jax.random.PRNGKey(2)
   317         1          3.0      3.0      0.0      new=[]
   318         1          3.0      3.0      0.0      old=[]
   319         1          8.0      8.0      0.0      lst_n = range(ninit,nfinal)
   320                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   321         2       8505.0   4252.5      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   322        11         66.0      6.0      0.0          for i in lst_n:
   323        10      21871.0   2187.1      0.0              bar.next()
   324                                                       # rho=dq.rand_dm(key,(i,i))
   325        10    2357270.0 235727.0      1.6              rho = random_matrix(i,i)
   326        10       1063.0    106.3      0.0              told_sum=[]
   327        10        619.0     61.9      0.0              tnew_sum=[]
   328        10         51.0      5.1      0.0              sum = 1000
   329        10      96791.0   9679.1      0.1              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   330        10      99402.0   9940.2      0.1              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   331        10   23609659.0    2e+06     16.1              fun2(rho)
   332        10   17659176.0    2e+06     12.1              fun1(rho)
   333     10010      42926.0      4.3      0.0              for x in range(sum):
   334                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   335                                                           # rho = random_matrix(i,i)
   336     10000    2871566.0    287.2      2.0                  rho = 0.999 * rho
   337     10000      43480.0      4.3      0.0                  t1 = time.time()
   338     10000   68558082.0   6855.8     46.8                  e1=fun1(rho)
   339     10000      51955.0      5.2      0.0                  told_sum.append(time.time() - t1)
   340     10000      35882.0      3.6      0.0                  t2 = time.time()
   341     10000   11758229.0   1175.8      8.0                  e2=fun2(rho)
   342                                                           # e2=e1
   343     10000      48150.0      4.8      0.0                  tnew_sum.append(time.time() - t2)
   344        10     167286.0  16728.6      0.1              if e1==e2:
   345                                                           print(True)
   346        10    1549684.0 154968.4      1.1              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   347        10    1620964.0 162096.4      1.1              told=jnp.sum(jnp.array(told_sum[1:sum]))
   348        10         73.0      7.3      0.0              new.append(tnew)
   349        10         54.0      5.4      0.0              old.append(told)
   350         1    4517386.0    5e+06      3.1      plt.figure()
   351         1     388401.0 388401.0      0.3      plt.plot(lst_n, new, label='new_time')
   352         1      11747.0  11747.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   353         1      19837.0  19837.0      0.0      plt.yscale('log')
   354         1       1208.0   1208.0      0.0      plt.xlabel('n')
   355         1       1006.0   1006.0      0.0      plt.ylabel('time (ms)')
   356         1       3756.0   3756.0      0.0      plt.title(f'comparing estimators computations')
   357         1      40358.0  40358.0      0.0      plt.legend()
   358         1       8998.0   8998.0      0.0      plt.grid(True)
   359         1    9321812.0    9e+06      6.4      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   360         1     106986.0 106986.0      0.1      plt.close()
   361         1      38373.0  38373.0      0.0      print(new,old)
   362         1         29.0     29.0      0.0      return None

