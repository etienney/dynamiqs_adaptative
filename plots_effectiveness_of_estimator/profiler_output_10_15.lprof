Timer unit: 1e-07 s

Total time: 15.1625 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 338

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   338                                           def profil(ninit, nfinal, H, jump_ops):
   339         1          6.0      6.0      0.0      k=4
   340         1      13592.0  13592.0      0.0      key = jax.random.PRNGKey(2)
   341         1          5.0      5.0      0.0      new=[]
   342         1          4.0      4.0      0.0      old=[]
   343         1         11.0     11.0      0.0      lst_n = range(ninit,nfinal)
   344                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   345         2      14398.0   7199.0      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   346         6         48.0      8.0      0.0          for i in lst_n:
   347         5      17614.0   3522.8      0.0              bar.next()
   348                                                       # rho=dq.rand_dm(key,(i,i))
   349         5    1197862.0 239572.4      0.8              rho = random_matrix(i,i)
   350         5        970.0    194.0      0.0              told_sum=[]
   351         5        440.0     88.0      0.0              tnew_sum=[]
   352         5         38.0      7.6      0.0              sum = 1000
   353         5      63434.0  12686.8      0.0              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   354         5      63032.0  12606.4      0.0              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   355         5   15555173.0    3e+06     10.3              fun2(rho)
   356         5   10966101.0    2e+06      7.2              fun1(rho)
   357      5005      38346.0      7.7      0.0              for x in range(sum):
   358                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   359      5000  100112656.0  20022.5     66.0                  rho = random_matrix(i,i)
   360      5000      51915.0     10.4      0.0                  t1 = time.time()
   361      5000    5658141.0   1131.6      3.7                  e1=fun1(rho)
   362      5000      47793.0      9.6      0.0                  told_sum.append(time.time() - t1)
   363      5000      29047.0      5.8      0.0                  t2 = time.time()
   364      5000    1924222.0    384.8      1.3                  e2=fun2(rho)
   365                                                           # e2=e1
   366      5000      34564.0      6.9      0.0                  tnew_sum.append(time.time() - t2)
   367         5       5890.0   1178.0      0.0              if e1==e2:
   368                                                           print(True)
   369         5    1289425.0 257885.0      0.9              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   370         5     696310.0 139262.0      0.5              told=jnp.sum(jnp.array(told_sum[1:sum]))
   371         5         41.0      8.2      0.0              new.append(tnew)
   372         5         34.0      6.8      0.0              old.append(told)
   373         1     983930.0 983930.0      0.6      plt.figure()
   374         1     533270.0 533270.0      0.4      plt.plot(lst_n, new, label='new_time')
   375         1      19126.0  19126.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   376         1      48854.0  48854.0      0.0      plt.yscale('log')
   377         1       3408.0   3408.0      0.0      plt.xlabel('n')
   378         1       2254.0   2254.0      0.0      plt.ylabel('time (ms)')
   379         1       8967.0   8967.0      0.0      plt.title(f'comparing estimators computations')
   380         1      86518.0  86518.0      0.1      plt.legend()
   381         1      18107.0  18107.0      0.0      plt.grid(True)
   382         1   12092669.0    1e+07      8.0      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   383         1       4643.0   4643.0      0.0      plt.close() 
   384         1      42425.0  42425.0      0.0      print(new,old)
   385         1         31.0     31.0      0.0      return None

