Timer unit: 1e-07 s

Total time: 259.159 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 326

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   326                                           def profil(ninit, nfinal):
   327         1          4.0      4.0      0.0      k=3
   328         1    1323727.0    1e+06      0.1      key = jax.random.PRNGKey(2)
   329         1          8.0      8.0      0.0      def H(n):
   330                                                   a = dq.destroy(n)
   331                                                   return dq.dag(a)@a+0.5*jnp.identity(n)
   332         1          7.0      7.0      0.0      def jump_ops(n):
   333                                                   a = dq.destroy(n)
   334                                                   kappa=1.0
   335                                                   alpha=1.0
   336                                                   return [jnp.sqrt(kappa)*(a@a-jnp.identity(n)*alpha**2)] 
   337         1          3.0      3.0      0.0      new=[]
   338         1          3.0      3.0      0.0      old=[]
   339         1         10.0     10.0      0.0      lst_n = range(ninit,nfinal)
   340         6         51.0      8.5      0.0      for i in lst_n:
   341         5   59675176.0    1e+07      2.3          rho=dq.rand_dm(key,(i,i))
   342         5        829.0    165.8      0.0          told_average=[]
   343         5        399.0     79.8      0.0          tnew_average=[]
   344         5         28.0      5.6      0.0          averages = 1000
   345         5      59161.0  11832.2      0.0          fun1 = jax.jit(lambda : estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   346         5    6121386.0    1e+06      0.2          fun2 = jax.jit(lambda : estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   347      5005      23140.0      4.6      0.0          for x in range(averages):
   348      5000      17923.0      3.6      0.0              t1 = time.time()
   349      5000   16453322.0   3290.7      0.6              e1=fun1()
   350      5000      23265.0      4.7      0.0              told_average.append(time.time() - t1)
   351      5000      17875.0      3.6      0.0              t2 = time.time()
   352      5000 2492176476.0 498435.3     96.2              e2=fun2()
   353      5000      23958.0      4.8      0.0              tnew_average.append(time.time() - t2)
   354         5     164044.0  32808.8      0.0          if e1==e2:
   355         1       9477.0   9477.0      0.0              print(True)
   356         5     996970.0 199394.0      0.0          tnew=jnp.sum(jnp.array(tnew_average[1:averages]))
   357         5     607103.0 121420.6      0.0          told=jnp.sum(jnp.array(told_average[1:averages]))
   358         5         61.0     12.2      0.0          new.append(tnew)
   359         5         39.0      7.8      0.0          old.append(told)
   360         1    1003394.0    1e+06      0.0      plt.figure()
   361         1     331837.0 331837.0      0.0      plt.plot(lst_n, new, label='new_time')
   362         1       9994.0   9994.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   363         1      17645.0  17645.0      0.0      plt.yscale('log')
   364         1       1127.0   1127.0      0.0      plt.xlabel('n')
   365         1        961.0    961.0      0.0      plt.ylabel('time (ms)')
   366         1       3440.0   3440.0      0.0      plt.title(f'comparing estimators computations')
   367         1      38413.0  38413.0      0.0      plt.legend()
   368         1       8304.0   8304.0      0.0      plt.grid(True)
   369         1   12452408.0    1e+07      0.5      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   370         1       2737.0   2737.0      0.0      plt.close() 
   371         1      29845.0  29845.0      0.0      print(new,old)
   372         1         36.0     36.0      0.0      return None

