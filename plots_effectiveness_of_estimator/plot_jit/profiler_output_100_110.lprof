Timer unit: 1e-07 s

Total time: 90.2769 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 336

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   336                                           def profil(ninit, nfinal, H, jump_ops):
   337         1          4.0      4.0      0.0      k=4
   338         1    1584947.0    2e+06      0.2      key = jax.random.PRNGKey(2)
   339         1          4.0      4.0      0.0      new=[]
   340         1          3.0      3.0      0.0      old=[]
   341         1          9.0      9.0      0.0      lst_n = range(ninit,nfinal)
   342                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   343         2      13048.0   6524.0      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   344        11         86.0      7.8      0.0          for i in lst_n:
   345        10      36399.0   3639.9      0.0              bar.next()
   346                                                       # rho=dq.rand_dm(key,(i,i))
   347        10   12581578.0    1e+06      1.4              rho = random_matrix(i,i)
   348        10       1442.0    144.2      0.0              told_sum=[]
   349        10        812.0     81.2      0.0              tnew_sum=[]
   350        10         61.0      6.1      0.0              sum = 1000
   351        10     131070.0  13107.0      0.0              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   352        10     138828.0  13882.8      0.0              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   353        10   25965504.0    3e+06      2.9              fun2(rho)
   354        10   21421113.0    2e+06      2.4              fun1(rho)
   355     10010     139685.0     14.0      0.0              for x in range(sum):
   356                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   357                                                           # rho = random_matrix(i,i)
   358     10000    8639962.0    864.0      1.0                  rho = 0.999 * rho
   359     10000     116888.0     11.7      0.0                  t1 = time.time()
   360     10000  613107473.0  61310.7     67.9                  e1=fun1(rho)
   361     10000     298863.0     29.9      0.0                  told_sum.append(time.time() - t1)
   362     10000     110347.0     11.0      0.0                  t2 = time.time()
   363     10000  203908383.0  20390.8     22.6                  e2=fun2(rho)
   364                                                           # e2=e1
   365     10000     291693.0     29.2      0.0                  tnew_sum.append(time.time() - t2)
   366        10     198208.0  19820.8      0.0              if e1==e2:
   367                                                           print(True)
   368        10    1807560.0 180756.0      0.2              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   369        10    1871792.0 187179.2      0.2              told=jnp.sum(jnp.array(told_sum[1:sum]))
   370        10         80.0      8.0      0.0              new.append(tnew)
   371        10         65.0      6.5      0.0              old.append(told)
   372         1     845742.0 845742.0      0.1      plt.figure()
   373         1     351137.0 351137.0      0.0      plt.plot(lst_n, new, label='new_time')
   374         1      11035.0  11035.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   375         1      20261.0  20261.0      0.0      plt.yscale('log')
   376         1       1159.0   1159.0      0.0      plt.xlabel('n')
   377         1       1055.0   1055.0      0.0      plt.ylabel('time (ms)')
   378         1       3815.0   3815.0      0.0      plt.title(f'comparing estimators computations')
   379         1      50998.0  50998.0      0.0      plt.legend()
   380         1      11704.0  11704.0      0.0      plt.grid(True)
   381         1    9035492.0    9e+06      1.0      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   382         1       4259.0   4259.0      0.0      plt.close() 
   383         1      66147.0  66147.0      0.0      print(new,old)
   384         1         90.0     90.0      0.0      return None

