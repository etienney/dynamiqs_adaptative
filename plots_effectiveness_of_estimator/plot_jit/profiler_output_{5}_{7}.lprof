Timer unit: 1e-07 s

Total time: 12.8859 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 326

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   326                                           def profil(ninit, nfinal):
   327         1         15.0     15.0      0.0      k=3
   328         1    1467230.0    1e+06      1.1      key = jax.random.PRNGKey(2)
   329         1          8.0      8.0      0.0      def H(n):
   330                                                   a = dq.destroy(n)
   331                                                   return dq.dag(a)@a+0.5*jnp.identity(n)
   332         1          9.0      9.0      0.0      def jump_ops(n):
   333                                                   a = dq.destroy(n)
   334                                                   kappa=1.0
   335                                                   alpha=1.0
   336                                                   return [jnp.sqrt(kappa)*(a@a-jnp.identity(n)*alpha**2)] 
   337         1          2.0      2.0      0.0      new=[]
   338         1          2.0      2.0      0.0      old=[]
   339         1          7.0      7.0      0.0      lst_n = range(ninit,nfinal)
   340         3         17.0      5.7      0.0      for i in lst_n:
   341         2   24276346.0    1e+07     18.8          rho=dq.rand_dm(key,(i,i))
   342         2        101.0     50.5      0.0          told_average=[]
   343         2         62.0     31.0      0.0          tnew_average=[]
   344         2         12.0      6.0      0.0          averages = 1000
   345         2      12461.0   6230.5      0.0          fun1 = jax.jit(lambda : estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   346         2     156178.0  78089.0      0.1          fun2 = jax.jit(lambda : estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   347      2002       6899.0      3.4      0.0          for x in range(averages):
   348      2000       6232.0      3.1      0.0              t1 = time.time()
   349      2000    3601765.0   1800.9      2.8              e1=fun1()
   350      2000       7525.0      3.8      0.0              told_average.append(time.time() - t1)
   351      2000       6171.0      3.1      0.0              t2 = time.time()
   352      2000   88484899.0  44242.4     68.7              e2=fun2()
   353      2000       7538.0      3.8      0.0              tnew_average.append(time.time() - t2)
   354         2     155955.0  77977.5      0.1          if e1==e2:
   355         2      10002.0   5001.0      0.0              print(True)
   356         2     587293.0 293646.5      0.5          tnew=jnp.sum(jnp.array(tnew_average[1:averages]))
   357         2     225510.0 112755.0      0.2          told=jnp.sum(jnp.array(told_average[1:averages]))
   358         2         30.0     15.0      0.0          new.append(tnew)
   359         2         16.0      8.0      0.0          old.append(told)
   360         1     676465.0 676465.0      0.5      plt.figure()
   361         1     361545.0 361545.0      0.3      plt.plot(lst_n, new, label='new_time')
   362         1       9717.0   9717.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   363         1      18742.0  18742.0      0.0      plt.yscale('log')
   364         1       1188.0   1188.0      0.0      plt.xlabel('n')
   365         1       1003.0   1003.0      0.0      plt.ylabel('time (ms)')
   366         1       3660.0   3660.0      0.0      plt.title(f'comparing estimators computations')
   367         1      39600.0  39600.0      0.0      plt.legend()
   368         1       8559.0   8559.0      0.0      plt.grid(True)
   369         1    8707818.0    9e+06      6.8      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   370         1       2866.0   2866.0      0.0      plt.close() 
   371         1      15577.0  15577.0      0.0      print(new,old)
   372         1         17.0     17.0      0.0      return None

