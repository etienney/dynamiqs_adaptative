Timer unit: 1e-07 s

Total time: 66.2096 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 336

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   336                                           def profil(ninit, nfinal, H, jump_ops):
   337         1          5.0      5.0      0.0      k=4
   338         1    1475948.0    1e+06      0.2      key = jax.random.PRNGKey(2)
   339         1          5.0      5.0      0.0      new=[]
   340         1          3.0      3.0      0.0      old=[]
   341         1         10.0     10.0      0.0      lst_n = range(ninit,nfinal)
   342                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   343         2      11330.0   5665.0      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   344        41        273.0      6.7      0.0          for i in lst_n:
   345        40     178742.0   4468.6      0.0              bar.next()
   346                                                       # rho=dq.rand_dm(key,(i,i))
   347        40   13582541.0 339563.5      2.1              rho = random_matrix(i,i)
   348        40       6367.0    159.2      0.0              told_sum=[]
   349        40       4402.0    110.0      0.0              tnew_sum=[]
   350        40        263.0      6.6      0.0              sum = 1000
   351        40     630021.0  15750.5      0.1              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   352        40     603726.0  15093.1      0.1              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   353        40  121171583.0    3e+06     18.3              fun2(rho)
   354        40   90104834.0    2e+06     13.6              fun1(rho)
   355     40040     254375.0      6.4      0.0              for x in range(sum):
   356                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   357                                                           # rho = random_matrix(i,i)
   358     40000   16725637.0    418.1      2.5                  rho = 0.999 * rho
   359     40000     223291.0      5.6      0.0                  t1 = time.time()
   360     40000  321073190.0   8026.8     48.5                  e1=fun1(rho)
   361     40000     334502.0      8.4      0.1                  told_sum.append(time.time() - t1)
   362     40000     213764.0      5.3      0.0                  t2 = time.time()
   363     40000   68373188.0   1709.3     10.3                  e2=fun2(rho)
   364                                                           # e2=e1
   365     40000     275786.0      6.9      0.0                  tnew_sum.append(time.time() - t2)
   366        40     249466.0   6236.6      0.0              if e1==e2:
   367                                                           print(True)
   368        40    6259439.0 156486.0      0.9              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   369        40    5846467.0 146161.7      0.9              told=jnp.sum(jnp.array(told_sum[1:sum]))
   370        40        292.0      7.3      0.0              new.append(tnew)
   371        40        252.0      6.3      0.0              old.append(told)
   372         1    1216154.0    1e+06      0.2      plt.figure()
   373         1    1302705.0    1e+06      0.2      plt.plot(lst_n, new, label='new_time')
   374         1      18724.0  18724.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   375         1      22858.0  22858.0      0.0      plt.yscale('log')
   376         1       1429.0   1429.0      0.0      plt.xlabel('n')
   377         1       1262.0   1262.0      0.0      plt.ylabel('time (ms)')
   378         1       3460.0   3460.0      0.0      plt.title(f'comparing estimators computations')
   379         1      39630.0  39630.0      0.0      plt.legend()
   380         1       8965.0   8965.0      0.0      plt.grid(True)
   381         1   11726206.0    1e+07      1.8      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   382         1       2681.0   2681.0      0.0      plt.close() 
   383         1     152021.0 152021.0      0.0      print(new,old)
   384         1         33.0     33.0      0.0      return None

