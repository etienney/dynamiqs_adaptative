Timer unit: 1e-07 s

Total time: 70.3151 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 330

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   330                                           def profil(ninit, nfinal, H, jump_ops):
   331         1          5.0      5.0      0.0      k=2
   332         1       7436.0   7436.0      0.0      key = jax.random.PRNGKey(2)
   333         1          5.0      5.0      0.0      new=[]
   334         1          3.0      3.0      0.0      old=[]
   335         1          8.0      8.0      0.0      lst_n = range(ninit,nfinal)
   336         6         36.0      6.0      0.0      for i in lst_n:
   337         5   46055804.0    9e+06      6.5          rho=dq.rand_dm(key,(i,i))
   338         5        554.0    110.8      0.0          told_sum=[]
   339         5        267.0     53.4      0.0          tnew_sum=[]
   340         5         24.0      4.8      0.0          sum = 1000
   341         5      45877.0   9175.4      0.0          fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   342         5    1283495.0 256699.0      0.2          fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   343         5  461528753.0    9e+07     65.6          fun2(rho)
   344         5    7799181.0    2e+06      1.1          fun1(rho)
   345      5005      24352.0      4.9      0.0          for x in range(sum):
   346      5000  171854951.0  34371.0     24.4              rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   347      5000      47567.0      9.5      0.0              t1 = time.time()
   348      5000    1406915.0    281.4      0.2              e1=fun1(rho)
   349      5000      32577.0      6.5      0.0              told_sum.append(time.time() - t1)
   350      5000      23240.0      4.6      0.0              t2 = time.time()
   351      5000     816113.0    163.2      0.1              e2=fun2(rho)
   352                                                       # e2=e1
   353      5000      23989.0      4.8      0.0              tnew_sum.append(time.time() - t2)
   354         5       3478.0    695.6      0.0          if e1==e2:
   355         5      34094.0   6818.8      0.0              print(True)
   356         5    1206836.0 241367.2      0.2          tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   357         5     582831.0 116566.2      0.1          told=jnp.sum(jnp.array(told_sum[1:sum]))
   358         5         47.0      9.4      0.0          new.append(tnew)
   359         5         32.0      6.4      0.0          old.append(told)
   360         1     788618.0 788618.0      0.1      plt.figure()
   361         1     366709.0 366709.0      0.1      plt.plot(lst_n, new, label='new_time')
   362         1      10684.0  10684.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   363         1      17586.0  17586.0      0.0      plt.yscale('log')
   364         1       1105.0   1105.0      0.0      plt.xlabel('n')
   365         1        964.0    964.0      0.0      plt.ylabel('time (ms)')
   366         1       3290.0   3290.0      0.0      plt.title(f'comparing estimators computations')
   367         1      60069.0  60069.0      0.0      plt.legend()
   368         1       8598.0   8598.0      0.0      plt.grid(True)
   369         1    9081686.0    9e+06      1.3      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   370         1       2805.0   2805.0      0.0      plt.close() 
   371         1      30766.0  30766.0      0.0      print(new,old)
   372         1         33.0     33.0      0.0      return None

