Timer unit: 1e-07 s

Total time: 7.86686 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 273

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   273                                           def profil(ninit, nfinal, H, jump_ops):
   274         1          5.0      5.0      0.0      k=4
   275         1       6235.0   6235.0      0.0      key = jax.random.PRNGKey(2)
   276         1          3.0      3.0      0.0      new=[]
   277         1          2.0      2.0      0.0      old=[]
   278         1          7.0      7.0      0.0      lst_n = range(ninit,nfinal)
   279                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   280         2       5751.0   2875.5      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   281        11         88.0      8.0      0.0          for i in lst_n:
   282        10      19087.0   1908.7      0.0              bar.next()
   283                                                       # rho=dq.rand_dm(key,(i,i))
   284        10    1553078.0 155307.8      2.0              rho = random_matrix(i,i)
   285        10       1229.0    122.9      0.0              told_sum=[]
   286        10        816.0     81.6      0.0              tnew_sum=[]
   287        10         57.0      5.7      0.0              sum = 1000
   288        10     119274.0  11927.4      0.2              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   289        10     114754.0  11475.4      0.1              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   290        10   24894812.0    2e+06     31.6              fun2(rho)
   291        10   19797876.0    2e+06     25.2              fun1(rho)
   292     10010      45650.0      4.6      0.1              for x in range(sum):
   293                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   294                                                           # rho = random_matrix(i,i)
   295     10000    3111880.0    311.2      4.0                  rho = 0.999 * rho
   296     10000      44429.0      4.4      0.1                  t1 = time.time()
   297     10000   10867811.0   1086.8     13.8                  e1=fun1(rho)
   298     10000      52592.0      5.3      0.1                  told_sum.append(time.time() - t1)
   299     10000      38599.0      3.9      0.0                  t2 = time.time()
   300     10000    2967167.0    296.7      3.8                  e2=fun2(rho)
   301                                                           # e2=e1
   302     10000      47016.0      4.7      0.1                  tnew_sum.append(time.time() - t2)
   303        10      10500.0   1050.0      0.0              if e1==e2:
   304                                                           print(True)
   305        10    1621277.0 162127.7      2.1              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   306        10    1356225.0 135622.5      1.7              told=jnp.sum(jnp.array(told_sum[1:sum]))
   307        10         88.0      8.8      0.0              new.append(tnew)
   308        10         52.0      5.2      0.0              old.append(told)
   309         1    1334706.0    1e+06      1.7      plt.figure()
   310         1     387905.0 387905.0      0.5      plt.plot(lst_n, new, label='new_time')
   311         1      12453.0  12453.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   312         1      18932.0  18932.0      0.0      plt.yscale('log')
   313         1       1650.0   1650.0      0.0      plt.xlabel('n')
   314         1        963.0    963.0      0.0      plt.ylabel('time (ms)')
   315         1       3502.0   3502.0      0.0      plt.title(f'comparing estimators computations')
   316         1      38754.0  38754.0      0.0      plt.legend()
   317         1       9048.0   9048.0      0.0      plt.grid(True)
   318         1   10075516.0    1e+07     12.8      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   319         1      66634.0  66634.0      0.1      plt.close()
   320         1      42143.0  42143.0      0.1      print(new,old)
   321         1         21.0     21.0      0.0      return None

