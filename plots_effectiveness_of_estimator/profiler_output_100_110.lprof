Timer unit: 1e-07 s

Total time: 123.598 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 336

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   336                                           def profil(ninit, nfinal, H, jump_ops):
   337         1          5.0      5.0      0.0      k=4
   338         1    1426983.0    1e+06      0.1      key = jax.random.PRNGKey(2)
   339         1          3.0      3.0      0.0      new=[]
   340         1          2.0      2.0      0.0      old=[]
   341         1          8.0      8.0      0.0      lst_n = range(ninit,nfinal)
   342                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   343         2      11863.0   5931.5      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   344        11         89.0      8.1      0.0          for i in lst_n:
   345        10      34941.0   3494.1      0.0              bar.next()
   346                                                       # rho=dq.rand_dm(key,(i,i))
   347        10   15355235.0    2e+06      1.2              rho = random_matrix(i,i)
   348        10       1644.0    164.4      0.0              told_sum=[]
   349        10       1101.0    110.1      0.0              tnew_sum=[]
   350        10         76.0      7.6      0.0              sum = 1000
   351        10     140710.0  14071.0      0.0              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   352        10     131467.0  13146.7      0.0              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   353        10   30107734.0    3e+06      2.4              fun2(rho)
   354        10   23625661.0    2e+06      1.9              fun1(rho)
   355     10010     213345.0     21.3      0.0              for x in range(sum):
   356                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   357                                                           # rho = random_matrix(i,i)
   358     10000   11995593.0   1199.6      1.0                  rho = 0.999 * rho
   359     10000     181971.0     18.2      0.0                  t1 = time.time()
   360     10000  842476247.0  84247.6     68.2                  e1=fun1(rho)
   361     10000     468156.0     46.8      0.0                  told_sum.append(time.time() - t1)
   362     10000     161964.0     16.2      0.0                  t2 = time.time()
   363     10000  289409069.0  28940.9     23.4                  e2=fun2(rho)
   364                                                           # e2=e1
   365     10000     470817.0     47.1      0.0                  tnew_sum.append(time.time() - t2)
   366        10     252651.0  25265.1      0.0              if e1==e2:
   367                                                           print(True)
   368        10    3229112.0 322911.2      0.3              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   369        10    2087047.0 208704.7      0.2              told=jnp.sum(jnp.array(told_sum[1:sum]))
   370        10         92.0      9.2      0.0              new.append(tnew)
   371        10        126.0     12.6      0.0              old.append(told)
   372         1    1144492.0    1e+06      0.1      plt.figure()
   373         1     450190.0 450190.0      0.0      plt.plot(lst_n, new, label='new_time')
   374         1      11155.0  11155.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   375         1      19734.0  19734.0      0.0      plt.yscale('log')
   376         1       1138.0   1138.0      0.0      plt.xlabel('n')
   377         1        929.0    929.0      0.0      plt.ylabel('time (ms)')
   378         1       3357.0   3357.0      0.0      plt.title(f'comparing estimators computations')
   379         1      38570.0  38570.0      0.0      plt.legend()
   380         1       8986.0   8986.0      0.0      plt.grid(True)
   381         1   12452830.0    1e+07      1.0      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   382         1       5103.0   5103.0      0.0      plt.close() 
   383         1      56629.0  56629.0      0.0      print(new,old)
   384         1         33.0     33.0      0.0      return None

