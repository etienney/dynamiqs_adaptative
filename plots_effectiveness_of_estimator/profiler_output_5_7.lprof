Timer unit: 1e-07 s

Total time: 12.5851 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 330

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   330                                           def profil(ninit, nfinal, H, jump_ops):
   331         1          5.0      5.0      0.0      k=2
   332         1    1344160.0    1e+06      1.1      key = jax.random.PRNGKey(2)
   333         1          3.0      3.0      0.0      new=[]
   334         1          2.0      2.0      0.0      old=[]
   335         1          7.0      7.0      0.0      lst_n = range(ninit,nfinal)
   336         3         27.0      9.0      0.0      for i in lst_n:
   337         2   30620524.0    2e+07     24.3          rho=dq.rand_dm(key,(i,i))
   338         2        128.0     64.0      0.0          told_sum=[]
   339         2         68.0     34.0      0.0          tnew_sum=[]
   340         2         10.0      5.0      0.0          sum = 1000
   341         2      12933.0   6466.5      0.0          fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   342         2      98133.0  49066.5      0.1          fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   343         2   61177958.0    3e+07     48.6          fun2(rho)
   344         2    3422960.0    2e+06      2.7          fun1(rho)
   345      2002      12955.0      6.5      0.0          for x in range(sum):
   346                                                       # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   347      2000   11877924.0   5939.0      9.4              rho = random_matrix(i,i)
   348      2000      15701.0      7.9      0.0              t1 = time.time()
   349      2000     561529.0    280.8      0.4              e1=fun1(rho)
   350      2000      15465.0      7.7      0.0              told_sum.append(time.time() - t1)
   351      2000      10633.0      5.3      0.0              t2 = time.time()
   352      2000     339626.0    169.8      0.3              e2=fun2(rho)
   353                                                       # e2=e1
   354      2000      13153.0      6.6      0.0              tnew_sum.append(time.time() - t2)
   355         2     141536.0  70768.0      0.1          if e1==e2:
   356                                                       print(True)
   357         2     787996.0 393998.0      0.6          tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   358         2     553502.0 276751.0      0.4          told=jnp.sum(jnp.array(told_sum[1:sum]))
   359         2         38.0     19.0      0.0          new.append(tnew)
   360         2         30.0     15.0      0.0          old.append(told)
   361         1    1202527.0    1e+06      1.0      plt.figure()
   362         1     522017.0 522017.0      0.4      plt.plot(lst_n, new, label='new_time')
   363         1      27001.0  27001.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   364         1      26742.0  26742.0      0.0      plt.yscale('log')
   365         1       1164.0   1164.0      0.0      plt.xlabel('n')
   366         1        975.0    975.0      0.0      plt.ylabel('time (ms)')
   367         1       5021.0   5021.0      0.0      plt.title(f'comparing estimators computations')
   368         1      49449.0  49449.0      0.0      plt.legend()
   369         1       8438.0   8438.0      0.0      plt.grid(True)
   370         1   12982038.0    1e+07     10.3      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   371         1       2517.0   2517.0      0.0      plt.close() 
   372         1      16244.0  16244.0      0.0      print(new,old)
   373         1         26.0     26.0      0.0      return None

