Timer unit: 1e-07 s

Total time: 3.8538 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: line_matrix at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           def line_matrix(line,k,n,matrix):
    41                                               # multiply faster a matrix which is only k lines of length n-k, it corresponds  
    42                                               # typically to A_N-P_n@A_N@P_n with P_n the projector on n<N, times another 
    43                                               # full matrix. It ouput a similar "linear" matrix
    44                                           
    45         1         13.0     13.0      0.0      def product(i,j):
    46                                                   # product between line i and column j in the circumstance beneath
    47                                                   sum = 0
    48                                                   for kappa in range(n-k):
    49                                                       sum+=line[i,kappa]*matrix[kappa,j]
    50                                                   return sum
    51                                               
    52         1     244209.0 244209.0      0.6      res = jnp.zeros((2*k,n-k), dtype_default)
    53                                           
    54                                               # k to account for the current row and the extension up by k
    55         7         32.0      4.6      0.0      for i in range(2*k):
    56                                                   # n-k because above the product is applied on zeros in 
    57                                                   # (A_N-P_n@A_N@P_n)@(P_n@rho_N@P_n)
    58       168        749.0      4.5      0.0          for j in range(n-k):
    59       162   35821640.0 221121.2     93.0              product_res=product(i,j)
    60       162    2471393.0  15255.5      6.4              res=res.at[i,j].set(product_res)
    61                                           
    62         1          8.0      8.0      0.0      return res

