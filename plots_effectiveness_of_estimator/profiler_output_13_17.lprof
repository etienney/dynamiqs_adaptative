Timer unit: 1e-07 s

Total time: 3.95984 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 273

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   273                                           def profil(ninit, nfinal, H, jump_ops):
   274         1          5.0      5.0      0.0      k=4
   275         1       6076.0   6076.0      0.0      key = jax.random.PRNGKey(2)
   276         1          3.0      3.0      0.0      new=[]
   277         1          2.0      2.0      0.0      old=[]
   278         1          5.0      5.0      0.0      lst_n = range(ninit,nfinal)
   279                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   280         2       6338.0   3169.0      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   281         5         34.0      6.8      0.0          for i in lst_n:
   282         4       8377.0   2094.2      0.0              bar.next()
   283                                                       # rho=dq.rand_dm(key,(i,i))
   284         4     695466.0 173866.5      1.8              rho = random_matrix(i,i)
   285         4        313.0     78.2      0.0              told_sum=[]
   286         4        198.0     49.5      0.0              tnew_sum=[]
   287         4         25.0      6.2      0.0              sum = 1000
   288         4      49023.0  12255.8      0.1              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   289         4      36263.0   9065.8      0.1              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   290         4    9893577.0    2e+06     25.0              fun2(rho)
   291         4    7511235.0    2e+06     19.0              fun1(rho)
   292      4004      18898.0      4.7      0.0              for x in range(sum):
   293                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   294                                                           # rho = random_matrix(i,i)
   295      4000    1262373.0    315.6      3.2                  rho = 0.999 * rho
   296      4000      18082.0      4.5      0.0                  t1 = time.time()
   297      4000    5185948.0   1296.5     13.1                  e1=fun1(rho)
   298      4000      21555.0      5.4      0.1                  told_sum.append(time.time() - t1)
   299      4000      14979.0      3.7      0.0                  t2 = time.time()
   300      4000    1931578.0    482.9      4.9                  e2=fun2(rho)
   301                                                           # e2=e1
   302      4000      20416.0      5.1      0.1                  tnew_sum.append(time.time() - t2)
   303         4       4088.0   1022.0      0.0              if e1==e2:
   304                                                           print(True)
   305         4     982459.0 245614.8      2.5              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   306         4     565745.0 141436.2      1.4              told=jnp.sum(jnp.array(told_sum[1:sum]))
   307         4         30.0      7.5      0.0              new.append(tnew)
   308         4         19.0      4.8      0.0              old.append(told)
   309         1    2016163.0    2e+06      5.1      plt.figure()
   310         1     365112.0 365112.0      0.9      plt.plot(lst_n, new, label='new_time')
   311         1      10832.0  10832.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   312         1      20528.0  20528.0      0.1      plt.yscale('log')
   313         1       1167.0   1167.0      0.0      plt.xlabel('n')
   314         1        995.0    995.0      0.0      plt.ylabel('time (ms)')
   315         1       3614.0   3614.0      0.0      plt.title(f'comparing estimators computations')
   316         1      40813.0  40813.0      0.1      plt.legend()
   317         1       9118.0   9118.0      0.0      plt.grid(True)
   318         1    8749442.0    9e+06     22.1      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   319         1     121547.0 121547.0      0.3      plt.close()
   320         1      25973.0  25973.0      0.1      print(new,old)
   321         1         31.0     31.0      0.0      return None

