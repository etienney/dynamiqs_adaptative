Timer unit: 1e-07 s

Total time: 2.15625 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: estimateur_opti at line 162

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   162                                           def estimateur_opti(rho_N,k,H_N_plus_k,jump_ops_N_plus_k):
   163                                               # return \|(\mathcal{L}_{N+k}-\mathcal{L}_{N})(\rho_N)\|_1
   164                                           
   165         1          5.0      5.0      0.0      len_jumps = len(jump_ops_N_plus_k)
   166         1       2353.0   2353.0      0.0      N = len(rho_N[0])
   167                                               # k = len(H_N_plus_k[0]) - N 
   168                                               # extension necessaire pour faire les calculs
   169         1      18319.0  18319.0      0.1      rho_etendu=extension_1D(rho_N,N+k)
   170                                               # reduction de \mathcal{L}_{N+k} en \mathcal{L}_{N} 
   171                                               # (extension(reduction())=projecteur())
   172         1          2.0      2.0      0.0      jump_ops_N = (
   173         3      30370.0  10123.3      0.1          [extension_1D(reduction_1D(jump_ops_N_plus_k[i],N),N+k) for i in range
   174         1          3.0      3.0      0.0          (len(jump_ops_N_plus_k))]
   175                                               )
   176         1      33724.0  33724.0      0.2      H_N=extension_1D(reduction_1D(H_N_plus_k,N),N+k)
   177                                               
   178                                               # calcul de (\mathcal{L}_{N+k}-\mathcal{L}_{N})(\rho_N)
   179                                               
   180                                               # calcul de la partie en H
   181                                               # total = (
   182                                               #     complex(0,-1)*line_to_matrix(line_matrix(matrix_to_line((H_N_plus_k-H_N),k,N+k),
   183                                               #     k,N+k,rho_etendu),k,N+k)
   184                                               # )
   185         1     449988.0 449988.0      2.1      a = matrix_to_line((H_N_plus_k-H_N),k,N+k)
   186         1    1696803.0    2e+06      7.9      b = line_matrix(a,k,N+k,rho_etendu)
   187         1     433472.0 433472.0      2.0      total = complex(0,-1)*line_to_matrix(b,k,N+k)
   188                                           
   189                                               # calcul de la partie en \mathcal{L}\rho\mathcal{L}
   190         2         18.0      9.0      0.0      for i in range(len_jumps):
   191         2        316.0    158.0      0.0          total += 0.5 * (
   192         5    4162663.0 832532.6     19.3              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   193         2        152.0     76.0      0.0              jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   194         2       1923.0    961.5      0.0              k,N+k,dq.dag(jump_ops_N_plus_k[i])),k,N+k)
   195                                                   )
   196         2        358.0    179.0      0.0          total += 0.5 * (
   197         5    4135681.0 827136.2     19.2              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   198         2        140.0     70.0      0.0              jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   199         2       1881.0    940.5      0.0              k,N+k,dq.dag(jump_ops_N[i])),k,N+k)
   200                                                   )
   201                                               # for highly mysterious reasons, sum doesn't work
   202                                               # print(line_to_matrix((line_matrix(line_matrix(matrix_to_line((
   203                                               #     jump_ops_N_plus_k[0] - jump_ops_N[0]),k,n+k),k,n+k,rho_etendu),
   204                                               #     k,n,dq.dag(jump_ops_N_plus_k[0]))),k,n+k))
   205                                               # print((jump_ops_N_plus_k[0]-jump_ops_N[0]) @ rho_etendu @ 
   206                                               #     dq.dag(jump_ops_N_plus_k[0]))
   207                                               # print(type(line_to_matrix((line_matrix(line_matrix(matrix_to_line((
   208                                               #     jump_ops_N_plus_k[0] - jump_ops_N[0]),k,n+k),k,n+k,rho_etendu),
   209                                               #     k,n,dq.dag(jump_ops_N_plus_k[0]))),k,n+k)))
   210                                               # print(type((jump_ops_N_plus_k[0]-jump_ops_N[0]) @ rho_etendu @ 
   211                                               #     dq.dag(jump_ops_N_plus_k[0])))
   212                                               # print(sum([line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   213                                               #     jump_ops_N_plus_k[i] - jump_ops_N[i]),k,N+k),k,N+k,rho_etendu),
   214                                               #     k,N+k,dq.dag(jump_ops_N_plus_k[i])),k,N+k)] for i in range(len(jump_ops_N_plus_k))))
   215                                               
   216                                               # computation of the anticommutator part
   217         2         19.0      9.5      0.0      for i in range(len_jumps):
   218                                                   # dq.dag(jump_ops_N_plus_k[i]-jump_ops_N[i]) @ jump_ops_N[i])
   219                                                   # @ rho_etendu
   220         2        303.0    151.5      0.0          total += -0.5 * (
   221         5    4851318.0 970263.6     22.5              line_to_matrix(line_matrix(line_matrix(matrix_to_line((
   222         1       2153.0   2153.0      0.0              dq.dag(jump_ops_N_plus_k[i] - jump_ops_N[i])),k,N+k),
   223         3         27.0      9.0      0.0              k,N+k,jump_ops_N[i]),k,N+k,rho_etendu),k,N+k)
   224                                                   )
   225                                                   # dq.dag(jump_ops_N_plus_k[i]-jump_ops_N[i])
   226                                                   # @ (jump_ops_N_plus_k[i]-jump_ops_N[i]) @ rho_etendu
   227         1    5738266.0    6e+06     26.6          total = special_product(jump_ops_N_plus_k,jump_ops_N,rho_etendu,k,N,total)
   228                                           
   229                                               # We take the norm
   230         1       2203.0   2203.0      0.0      return jnp.linalg.norm((total)+dq.dag(total))

