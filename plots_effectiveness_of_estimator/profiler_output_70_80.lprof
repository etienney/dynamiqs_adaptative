Timer unit: 1e-07 s

Total time: 73.1735 s
File: c:\Users\petienne\Desktop\PFE\Gitlab\aposteriori-lindblad\code\tests de fonctions particulières\test_fast_estimateur.py
Function: profil at line 273

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   273                                           def profil(ninit, nfinal, H, jump_ops):
   274         1          5.0      5.0      0.0      k=4
   275         1       5625.0   5625.0      0.0      key = jax.random.PRNGKey(2)
   276         1          4.0      4.0      0.0      new=[]
   277         1          2.0      2.0      0.0      old=[]
   278         1          6.0      6.0      0.0      lst_n = range(ninit,nfinal)
   279                                               # rho=dq.rand_dm(key,(nfinal,nfinal))
   280         2       6570.0   3285.0      0.0      with Bar('Processing...', max = nfinal-ninit+1) as bar:
   281        11         65.0      5.9      0.0          for i in lst_n:
   282        10      18699.0   1869.9      0.0              bar.next()
   283                                                       # rho=dq.rand_dm(key,(i,i))
   284        10    7374454.0 737445.4      1.0              rho = random_matrix(i,i)
   285        10       1366.0    136.6      0.0              told_sum=[]
   286        10        837.0     83.7      0.0              tnew_sum=[]
   287        10         61.0      6.1      0.0              sum = 1000
   288        10     140761.0  14076.1      0.0              fun1 = jax.jit(lambda rho: estimateur_sur(rho,k,H(i+k),jump_ops(i+k)))
   289        10     135190.0  13519.0      0.0              fun2 = jax.jit(lambda rho: estimateur_opti(rho,k,H(i+k),jump_ops(i+k)))
   290        10   27232135.0    3e+06      3.7              fun2(rho)
   291        10   20155356.0    2e+06      2.8              fun1(rho)
   292     10010      77411.0      7.7      0.0              for x in range(sum):
   293                                                           # rho=dq.rand_dm(jax.random.PRNGKey(x),(i,i))
   294                                                           # rho = random_matrix(i,i)
   295     10000    4512523.0    451.3      0.6                  rho = 0.999 * rho
   296     10000      63651.0      6.4      0.0                  t1 = time.time()
   297     10000  421470415.0  42147.0     57.6                  e1=fun1(rho)
   298     10000     152660.0     15.3      0.0                  told_sum.append(time.time() - t1)
   299     10000      56139.0      5.6      0.0                  t2 = time.time()
   300     10000  236737446.0  23673.7     32.4                  e2=fun2(rho)
   301                                                           # e2=e1
   302     10000     146990.0     14.7      0.0                  tnew_sum.append(time.time() - t2)
   303        10      11057.0   1105.7      0.0              if e1==e2:
   304                                                           print(True)
   305        10    1550877.0 155087.7      0.2              tnew=jnp.sum(jnp.array(tnew_sum[1:sum]))
   306        10    1241083.0 124108.3      0.2              told=jnp.sum(jnp.array(told_sum[1:sum]))
   307        10         66.0      6.6      0.0              new.append(tnew)
   308        10         50.0      5.0      0.0              old.append(told)
   309         1    1154003.0    1e+06      0.2      plt.figure()
   310         1     398948.0 398948.0      0.1      plt.plot(lst_n, new, label='new_time')
   311         1      12924.0  12924.0      0.0      plt.plot(lst_n, old, '--', label='old_time')
   312         1      20916.0  20916.0      0.0      plt.yscale('log')
   313         1       1255.0   1255.0      0.0      plt.xlabel('n')
   314         1       1066.0   1066.0      0.0      plt.ylabel('time (ms)')
   315         1       3925.0   3925.0      0.0      plt.title(f'comparing estimators computations')
   316         1      43154.0  43154.0      0.0      plt.legend()
   317         1       9470.0   9470.0      0.0      plt.grid(True)
   318         1    8885569.0    9e+06      1.2      plt.savefig(f'plots_effectiveness_of_estimator/plot_{ninit}_{nfinal}.png')  # Save the plot
   319         1      69869.0  69869.0      0.0      plt.close()
   320         1      42717.0  42717.0      0.0      print(new,old)
   321         1         26.0     26.0      0.0      return None

